# Author: Igibek Koishybayev
name: 'Argus Action'
description: 'Static analyzer for GitHub Actions workflow and third-party actions to detect code injection vulnerabilities.'
inputs:
  mode:
    description: >
      Argus supports two modes of operation: (1) action and (2) repo. 
      1. The "action" mode can be used to analyze the custom actions.
        1.1. If the "action" mode is used, the "workflow" input will be ignored. 
      2. The "repo" mode is used to analyze the repository's workflows (default)
    default: 'repo'
  url:
    description: >
      The repository url that needs to be analyzed. By default "url" will be equal to the current workflows repository. 
      Note: if you are passing the different url, make sure that the token used to access the repository has rights to do so.
      Check the "token" input below
    default: ${{ github.repositoryUrl }}
  workflow:
    description: >
      Workflow to analyze. By default it will analyze all the workflows under .github/workflows folder. This maybe time consuming.
  reference:
    description: >
      The reference (branch, tag) is going to be used to clone the repository.
      By default the reference of the workflow that triggered the action will be used.
    default: ${{ github.ref }}
  token:
    description: >
      GitHub token that can be used to access the repository that needs to be analyzed. By default it will use auto generated token
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    # setup codeql
    - name: Setting up the CodeQL
      run: |
        cd ${{ github.action_path }}/bin
        wget -q https://github.com/github/codeql-action/releases/download/codeql-bundle-v2.18.3/codeql-bundle-linux64.tar.gz -O codeql.tar.gz
        tar -xf codeql.tar.gz
        echo ${{github.action_path}}/bin/codeql >> $GITHUB_PATH
      shell: bash
    
    # setup python environment
    - name: Setting up the python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        # cache: "pip"
        # cache-dependency-path: ${{ github.action_path}}/requirements.txt

    # install dependencies
    - name: Install pip dependencies
      run: |
        pip install -r ${{ github.action_path }}/requirements.txt -q
      shell: bash

    # run the argus with provided inputs
    - name: Check all the workflows inside the repository
      if: inputs.workflow == ''
      run: python ${{ github.action_path }}/argus.py --mode=$MODE --url=$URL --reference=$REFERENCE --output-folder=${{ github.workspace }} --verbose
      shell: bash
      env:
        MODE: ${{ inputs.mode }}
        URL: ${{ inputs.url }}
        REFERENCE: ${{ inputs.reference }}
        GITHUB_TOKEN: ${{ inputs.token }}
    
    - name: Check all the workflows inside the repository
      if: inputs.workflow != ''
      run: python ${{ github.action_path }}/argus.py --mode=$MODE --url=$URL --reference=$REFERENCE --output-folder=${{ github.workspace }} --workflow-path=$WORKFLOW --verbose
      shell: bash
      env:
        MODE: ${{ inputs.mode }}
        URL: ${{ inputs.url }}
        REFERENCE: ${{ inputs.reference }}
        GITHUB_TOKEN: ${{ inputs.token }}
        WORKFLOW: ${{ inputs.workflow }}

    - name: Copy the sarif results to workspace
      id: sarif-files
      run: cp -r ${{ github.action_path }}/results ${{ github.workspace }}/sarif-output
      shell: bash
 
    - name: Upload SARIF files
      if: ${{ hashFiles('sarif-output/') != '' }} # https://stackoverflow.com/questions/71336204/github-action-check-if-a-file-already-exists
      uses: github/codeql-action/upload-sarif@v3
      with:
        # Path to SARIF file relative to the root of the repository. We can path sarif-output folder to upload the whole folder
        sarif_file: ${{github.workspace}}/sarif-output
        # Optional category for the results
        # Used to differentiate multiple results for one commit
        category: argus-action
